spatial_rape = mutate(spatial_rape, SMR_cat = cut(smr_rape, breaks, include.lowest = TRUE))
plot_sp2<-ggplot(spatial_rape) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "bottom",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 6))+
labs(subtitle="A")
#Incidence over time
plot_tmp1<-ggplot(temporal_dowry)+
geom_line(aes(x=year, y=smr_dowry))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
plot_tmp2<-ggplot(temporal_rape)+
geom_line(aes(x=year, y=smr_rape))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
# arrange plots side-by-side
plot_desc_dowry<-grid.arrange(plot_sp1, plot_tmp1, ncol = 2)
ggsave("Desc Dowry.png",plot_desc_dowry)
plot_desc_rape<-grid.arrange(plot_sp2, plot_tmp2, ncol = 2)
ggsave("Desc Rape.png",plot_desc_rape)
#Generating adjacency matrix
carto_up_sp <- as(carto_up, "Spatial")
w.rook <- poly2nb(carto_up_sp, row.names=carto_up$ID_area, queen=FALSE)
nb2INLA("map.graph", w.rook)
g = paste(getwd(),"/map.graph",sep="")
#Renaming columns for consistency
area_crime<-rename(area_crime, total_dowry=dowry, total_rape = rape, total_e_dowry = e_dowry, total_e_rape = e_rape)
#Incidence over space
breaks =  c(0,0.25,0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5)
spatial_dowry = mutate(spatial_dowry, SMR_cat = cut(smr_dowry, breaks, include.lowest = TRUE))
# Define the number of colors you wants
colours <- brewer.pal(9, "OrRd")
# Add more colors to this palette :
colours <- colorRampPalette(colours)(10)
plot_sp1<-ggplot(spatial_dowry) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "bottom",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 5.8))+
labs(subtitle="A")
spatial_rape = mutate(spatial_rape, SMR_cat = cut(smr_rape, breaks, include.lowest = TRUE))
plot_sp2<-ggplot(spatial_rape) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "bottom",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 5.8))+
labs(subtitle="A")
#Incidence over time
plot_tmp1<-ggplot(temporal_dowry)+
geom_line(aes(x=year, y=smr_dowry))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
plot_tmp2<-ggplot(temporal_rape)+
geom_line(aes(x=year, y=smr_rape))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
# arrange plots side-by-side
plot_desc_dowry<-grid.arrange(plot_sp1, plot_tmp1, ncol = 2)
ggsave("Desc Dowry.png",plot_desc_dowry)
plot_desc_rape<-grid.arrange(plot_sp2, plot_tmp2, ncol = 2)
ggsave("Desc Rape.png",plot_desc_rape)
#Generating adjacency matrix
carto_up_sp <- as(carto_up, "Spatial")
w.rook <- poly2nb(carto_up_sp, row.names=carto_up$ID_area, queen=FALSE)
nb2INLA("map.graph", w.rook)
g = paste(getwd(),"/map.graph",sep="")
#Renaming columns for consistency
area_crime<-rename(area_crime, total_dowry=dowry, total_rape = rape, total_e_dowry = e_dowry, total_e_rape = e_rape)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(ggplot2)
library(tidyverse)
library(spdep)
library(INLA)
library(glue)
library(Rgraphviz)
library(gridExtra)
library(RColorBrewer)
library(tableone)
library(kableExtra)
load('DATA_SCIENTIFIC_PROJECTS/DS1_CrimeUttarPradesh/CrimeUttarPradesh.RData')
#Merge map coordinates with data for India
carto_up<-st_as_sf(carto_up)
area_crime<-merge(carto_up, data, by=c("ID_area","dist","state"))
df_view<-st_drop_geometry(area_crime)
#Check for NAs
print(sum(is.na(area_crime)))
#Create spatial and temporal aggregate datasets
temporal_dowry<-area_crime %>%
group_by(year) %>%
summarise(total_dowry = sum(dowry), total_e_dowry = sum(e_dowry)) %>%
mutate(smr_dowry = total_dowry/total_e_dowry)
spatial_dowry<-area_crime %>%
group_by(ID_area, dist) %>%
summarise(total_dowry = sum(dowry), total_e_dowry = sum(e_dowry)) %>%
mutate(smr_dowry = total_dowry/total_e_dowry)
temporal_rape<-area_crime %>%
group_by(year) %>%
summarise(total_rape = sum(rape), total_e_rape = sum(e_rape)) %>%
mutate(smr_rape = total_rape/total_e_rape)
spatial_rape<-area_crime %>%
group_by(ID_area, dist) %>%
summarise(total_rape = sum(rape), total_e_rape = sum(e_rape)) %>%
mutate(smr_rape = total_rape/total_e_rape)
#Table 1
# summarize data
tbl1<-df_view %>%
group_by(year) %>%
summarise(Mean.Pop=mean(pop), SD.Pop=sd(pop),Mean.Dowry = mean(dowry), SD.Dowry = sd(dowry),
Mean.Rape = mean(rape), SD.Rape = sd(rape))
# print summary table
write.csv(tbl1,"tbl1.csv")
#Incidence over space
breaks =  c(0,0.25,0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5)
spatial_dowry = mutate(spatial_dowry, SMR_cat = cut(smr_dowry, breaks, include.lowest = TRUE))
# Define the number of colors you wants
colours <- brewer.pal(9, "OrRd")
# Add more colors to this palette :
colours <- colorRampPalette(colours)(10)
plot_sp1<-ggplot(spatial_dowry) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "bottom",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 5.5))+
labs(subtitle="A")
spatial_rape = mutate(spatial_rape, SMR_cat = cut(smr_rape, breaks, include.lowest = TRUE))
plot_sp2<-ggplot(spatial_rape) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "bottom",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 5.5))+
labs(subtitle="A")
#Incidence over time
plot_tmp1<-ggplot(temporal_dowry)+
geom_line(aes(x=year, y=smr_dowry))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
plot_tmp2<-ggplot(temporal_rape)+
geom_line(aes(x=year, y=smr_rape))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
# arrange plots side-by-side
plot_desc_dowry<-grid.arrange(plot_sp1, plot_tmp1, ncol = 2)
ggsave("Desc Dowry.png",plot_desc_dowry)
plot_desc_rape<-grid.arrange(plot_sp2, plot_tmp2, ncol = 2)
ggsave("Desc Rape.png",plot_desc_rape)
#Generating adjacency matrix
carto_up_sp <- as(carto_up, "Spatial")
w.rook <- poly2nb(carto_up_sp, row.names=carto_up$ID_area, queen=FALSE)
nb2INLA("map.graph", w.rook)
g = paste(getwd(),"/map.graph",sep="")
#Renaming columns for consistency
area_crime<-rename(area_crime, total_dowry=dowry, total_rape = rape, total_e_dowry = e_dowry, total_e_rape = e_rape)
#Incidence over space
breaks =  c(0,0.25,0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5)
spatial_dowry = mutate(spatial_dowry, SMR_cat = cut(smr_dowry, breaks, include.lowest = TRUE))
# Define the number of colors you wants
colours <- brewer.pal(9, "OrRd")
# Add more colors to this palette :
colours <- colorRampPalette(colours)(10)
plot_sp1<-ggplot(spatial_dowry) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "bottom",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 5.3))+
labs(subtitle="A")
spatial_rape = mutate(spatial_rape, SMR_cat = cut(smr_rape, breaks, include.lowest = TRUE))
plot_sp2<-ggplot(spatial_rape) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "bottom",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 5.3))+
labs(subtitle="A")
#Incidence over time
plot_tmp1<-ggplot(temporal_dowry)+
geom_line(aes(x=year, y=smr_dowry))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
plot_tmp2<-ggplot(temporal_rape)+
geom_line(aes(x=year, y=smr_rape))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
# arrange plots side-by-side
plot_desc_dowry<-grid.arrange(plot_sp1, plot_tmp1, ncol = 2)
ggsave("Desc Dowry.png",plot_desc_dowry)
plot_desc_rape<-grid.arrange(plot_sp2, plot_tmp2, ncol = 2)
ggsave("Desc Rape.png",plot_desc_rape)
#Generating adjacency matrix
carto_up_sp <- as(carto_up, "Spatial")
w.rook <- poly2nb(carto_up_sp, row.names=carto_up$ID_area, queen=FALSE)
nb2INLA("map.graph", w.rook)
g = paste(getwd(),"/map.graph",sep="")
#Renaming columns for consistency
area_crime<-rename(area_crime, total_dowry=dowry, total_rape = rape, total_e_dowry = e_dowry, total_e_rape = e_rape)
#Incidence over space
breaks =  c(0,0.25,0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5)
spatial_dowry = mutate(spatial_dowry, SMR_cat = cut(smr_dowry, breaks, include.lowest = TRUE))
# Define the number of colors you wants
colours <- brewer.pal(9, "OrRd")
# Add more colors to this palette :
colours <- colorRampPalette(colours)(10)
plot_sp1<-ggplot(spatial_dowry) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "bottom",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 5.3))+
labs(subtitle="A")
spatial_rape = mutate(spatial_rape, SMR_cat = cut(smr_rape, breaks, include.lowest = TRUE))
plot_sp2<-ggplot(spatial_rape) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "right",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 5.3))+
labs(subtitle="A")
#Incidence over time
plot_tmp1<-ggplot(temporal_dowry)+
geom_line(aes(x=year, y=smr_dowry))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
plot_tmp2<-ggplot(temporal_rape)+
geom_line(aes(x=year, y=smr_rape))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
# arrange plots side-by-side
plot_desc_dowry<-grid.arrange(plot_sp1, plot_tmp1, ncol = 2)
ggsave("Desc Dowry.png",plot_desc_dowry)
plot_desc_rape<-grid.arrange(plot_sp2, plot_tmp2, ncol = 2)
ggsave("Desc Rape.png",plot_desc_rape)
#Generating adjacency matrix
carto_up_sp <- as(carto_up, "Spatial")
w.rook <- poly2nb(carto_up_sp, row.names=carto_up$ID_area, queen=FALSE)
nb2INLA("map.graph", w.rook)
g = paste(getwd(),"/map.graph",sep="")
#Renaming columns for consistency
area_crime<-rename(area_crime, total_dowry=dowry, total_rape = rape, total_e_dowry = e_dowry, total_e_rape = e_rape)
#Incidence over space
breaks =  c(0,0.25,0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5)
spatial_dowry = mutate(spatial_dowry, SMR_cat = cut(smr_dowry, breaks, include.lowest = TRUE))
# Define the number of colors you wants
colours <- brewer.pal(9, "OrRd")
# Add more colors to this palette :
colours <- colorRampPalette(colours)(10)
plot_sp1<-ggplot(spatial_dowry) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "right",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 6))+
labs(subtitle="A")
spatial_rape = mutate(spatial_rape, SMR_cat = cut(smr_rape, breaks, include.lowest = TRUE))
plot_sp2<-ggplot(spatial_rape) +
geom_sf(aes(fill = SMR_cat), col = 'black') +
theme_bw() +
scale_fill_manual(values = colours, drop=FALSE) +
guides(fill=guide_legend(title="SMR"))+
theme(axis.ticks = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
legend.position = "right",legend.key.size = unit(0.35, "cm"),
legend.text = element_text(size = 6))+
labs(subtitle="A")
#Incidence over time
plot_tmp1<-ggplot(temporal_dowry)+
geom_line(aes(x=year, y=smr_dowry))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
plot_tmp2<-ggplot(temporal_rape)+
geom_line(aes(x=year, y=smr_rape))+
labs(x='Year',y='SMR')+
labs(subtitle="B")
# arrange plots side-by-side
plot_desc_dowry<-grid.arrange(plot_sp1, plot_tmp1, ncol = 2)
ggsave("Desc Dowry.png",plot_desc_dowry)
plot_desc_rape<-grid.arrange(plot_sp2, plot_tmp2, ncol = 2)
ggsave("Desc Rape.png",plot_desc_rape)
#Generating adjacency matrix
carto_up_sp <- as(carto_up, "Spatial")
w.rook <- poly2nb(carto_up_sp, row.names=carto_up$ID_area, queen=FALSE)
nb2INLA("map.graph", w.rook)
g = paste(getwd(),"/map.graph",sep="")
#Renaming columns for consistency
area_crime<-rename(area_crime, total_dowry=dowry, total_rape = rape, total_e_dowry = e_dowry, total_e_rape = e_rape)
library(Seurat)
library(Matrix)
library(tidyverse)
# Load the Seurat object from a file
combined_seurat <- readRDS(file = "Multiome_RNA_ATAC_Mouse_Brain/combined_seurat.rds")
print('hello')
# Subset the Seurat object
subset_seurat <- combined_seurat[,1:1000]
rm(combined_seurat)
# Visualize QC metrics as a violin plot
#mt_genes<-c('ENSMUSG00000064337','ENSMUSG00000064339','ENSMUSG00000064336','ENSMUSG00000064338','ENSMUSG00000064340','ENSMUSG00000064342','ENSMUSG00000064343','ENSMUSG00000064344','ENSMUSG00000064346','ENSMUSG00000064347','ENSMUSG00000064348','ENSMUSG00000064349','ENSMUSG00000064350','ENSMUSG00000064352','ENSMUSG00000064353','ENSMUSG00000064355','ENSMUSG00000064359','ENSMUSG00000064361','ENSMUSG00000064364','ENSMUSG00000064365','ENSMUSG00000064366','ENSMUSG00000064369','ENSMUSG00000064371','ENSMUSG00000064372')
#subset_seurat$mitoPercent<-PercentageFeatureSet(subset_seurat, features=mt_genes)
#QC
VlnPlot(subset_seurat, features = c("nFeature_RNA", "nCount_RNA","nFeature_ATAC", "nCount_ATAC", "mitoPercent"), ncol = 5)
hist(subset_seurat$nCount_RNA,breaks=200)
filtered_seurat <- subset(subset_seurat, subset = nFeature_RNA > 200 & nCount_RNA > 200 & nFeature_ATAC > 200 & nCount_ATAC > 200)
subset_seurat
filtered_seurat
VlnPlot(filtered_seurat, features = c("nFeature_RNA", "nCount_RNA","nFeature_ATAC", "nCount_ATAC", "mitoPercent"), ncol = 5)
#Normalisation - MUST REPEAT BELOW STEPS FOR BOTH RNA AND ATAC BY SWITCHING DEFAULT ASSAY
filtered_seurat <- NormalizeData(filtered_seurat, normalization.method = "LogNormalize", scale.factor = 10000)
#Variable selection
filtered_seurat <- FindVariableFeatures(filtered_seurat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(filtered_seurat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(filtered_seurat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
#Scalin Data
all.genes <- rownames(filtered_seurat)
filtered_seurat <- ScaleData(filtered_seurat, features = all.genes)
#PCA
filtered_seurat <- RunPCA(filtered_seurat, features = VariableFeatures(object = filtered_seurat))
VizDimLoadings(filtered_seurat, dims = 1:2, reduction = "pca")
DimPlot(filtered_seurat, reduction = "pca")
ElbowPlot(filtered_seurat) # Majority variance captured in first 7 PCs
filtered_seurat <- FindNeighbors(filtered_seurat, dims = 1:7)
filtered_seurat <- FindClusters(filtered_seurat, resolution = 0.8, verbose = FALSE)
filtered_seurat <- RunUMAP(filtered_seurat, dims = 1:7)
DimPlot(filtered_seurat, label = TRUE)
BiocManager::install("GenomeInfoDbData")
dir(.libPaths()[1], "Genome")
install.packages("rlang")
install.packages("rlang")
library(rlang)
BiocManager::install("GenomeInfoDbData")
BiocManager::install("GenomeInfoDbData")
if (!"GenomeInfoDbData" %in% installed.packages()) {
BiocManager::install("GenomeInfoDbData")
} else {
library(GenomeInfoDbData)
}
if (!"GenomeInfoDbData" %in% installed.packages()) {
BiocManager::install("GenomeInfoDbData")
} else {
library(GenomeInfoDbData)
}
if (!"GenomeInfoDbData" %in% installed.packages()) {
BiocManager::install("GenomeInfoDbData")
} else {
library(GenomeInfoDbData)
}
# Load the data from the RDS file
sub_pop <- readRDS("Zhang 68k facs/all_pure_select_11types.rds")
samples <- readRDS("Zhang 68k facs/pbmc68k_data.rds")
gene_exp <- readRDS("Zhang 68k facs/all_pure_pbmc_data.rds")
summary(sub_pop)
view(sub_pop)
View(sub_pop)
typeof(sub_pop)
sub_pop_df <- data.frame(sub_pop)
View(sub_pop)
View(samples)
#
# Copyright (c) 2016 10x Genomics, Inc. All rights reserved.
#
rm(list=ls()) # clear workspace
# ----------------------------
# load relevant libraries
# ----------------------------
library(Matrix)
library(ggplot2)
library(Rtsne)
library(svd)
library(dplyr)
library(plyr)
library(data.table)
library(pheatmap)
# -------------------------------------
# specify paths and load functions
# -------------------------------------
DATA_DIR <- "Zhang 68k facs/data"        # SPECIFY HERE
PROG_DIR <- "Zhang 68k facs/scripts"     # SPECIFY HERE
FIG_DIR <-  "Zhang 68k facs/figures"      # SPECIFY HERE
source(file.path(PROG_DIR,'util.R'))
setwd("C:/Users/jay_g/OneDrive - Imperial College London/MSC HDA/Summer Project/Code/Zhang 68k facs/scripts")
sub_pop[["pure_id"]]
#
# Copyright (c) 2016 10x Genomics, Inc. All rights reserved.
#
rm(list=ls()) # clear workspace
# ----------------------------
# load relevant libraries
# ----------------------------
library(Matrix)
library(ggplot2)
library(Rtsne)
library(svd)
library(dplyr)
library(plyr)
library(data.table)
library(pheatmap)
# -------------------------------------
# specify paths and load functions
# -------------------------------------
DATA_DIR <- "Zhang 68k facs/data"        # SPECIFY HERE
PROG_DIR <- "Zhang 68k facs/scripts"     # SPECIFY HERE
FIG_DIR <-  "Zhang 68k facs/figures"      # SPECIFY HERE
source(file.path(PROG_DIR,'util.R'))
setwd("C:/Users/jay_g/OneDrive - Imperial College London/MSC HDA/Summer Project/Code/Zhang 68k facs/scripts")
#
# Copyright (c) 2016 10x Genomics, Inc. All rights reserved.
#
rm(list=ls()) # clear workspace
# ----------------------------
# load relevant libraries
# ----------------------------
library(Matrix)
library(ggplot2)
library(Rtsne)
library(svd)
library(dplyr)
library(plyr)
library(data.table)
library(pheatmap)
# -------------------------------------
# specify paths and load functions
# -------------------------------------
DATA_DIR <- "Zhang 68k facs/data"        # SPECIFY HERE
PROG_DIR <- "Zhang 68k facs/scripts"     # SPECIFY HERE
FIG_DIR <-  "Zhang 68k facs/figures"      # SPECIFY HERE
source(file.path(PROG_DIR,'util.R'))
setwd("C:/Users/jay_g/OneDrive - Imperial College London/MSC HDA/Summer Project/Code")
# ----------------------------
# load relevant libraries
# ----------------------------
library(Matrix)
library(ggplot2)
library(Rtsne)
library(svd)
library(dplyr)
library(plyr)
library(data.table)
library(pheatmap)
# -------------------------------------
# specify paths and load functions
# -------------------------------------
DATA_DIR <- "Zhang 68k facs/data"        # SPECIFY HERE
PROG_DIR <- "Zhang 68k facs/scripts"     # SPECIFY HERE
FIG_DIR <-  "Zhang 68k facs/figures"      # SPECIFY HERE
source(file.path(PROG_DIR,'util.R'))
# ------------------------------------------------------------
# load 68k PBMC data, 11 purified PBMC data and meta-data
# ------------------------------------------------------------
pbmc_68k <- readRDS(file.path(DATA_DIR,'pbmc68k_data.rds'))
pure_11 <- readRDS(file.path(DATA_DIR,'all_pure_select_11types.rds'))
all_data <- pbmc_68k$all_data
purified_ref_11 <- load_purified_pbmc_types(pure_11,pbmc_68k$ens_genes)
View(purified_ref_11)
# --------------------------------------------------------------------------------------
# normalize by RNA content (umi counts) and select the top 1000 most variable genes
# --------------------------------------------------------------------------------------
m<-all_data[[1]]$hg19$mat
View(m)
l<-.normalize_by_umi(m)
m_n<-l$m
df<-.get_variable_gene(m_n)
m_n[,100]
m_n[100,]
m_n[1:100,]
m_n<-m_n[1:1000,] #SUBSETTING
df<-.get_variable_gene(m_n)
m_n<-l$m
df<-.get_variable_gene(m_n)
# Load the data from the RDS file
library(rhdf5)
# Use the h5read function to read the data
data <- h5read("PBMC 10k multiomic/pbmc10k.h5mu")
# Use the h5read function to read the data
data <- h5ls("PBMC 10k multiomic/pbmc10k.h5mu")
View(data)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MuData")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MuData")
library(MuData)
data<-readh5mu("PBMC 10k multiomic/pbmc10k.h5mu/")
install.packages("Signac")
library(Signac)
