# Plot the data
for (metric in unique(df_long$Metric)) {
# Filter data for the current metric
df_metric <- df_long %>% filter(Metric == metric)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, fill = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df.csv"))
df_A_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df.csv"))
df_B_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df_rna.csv"))
df_B_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df_rna.csv"))
# Add identifying columns
df_A_metric1$Model <- 'RNA + ATAC'
df_A_metric1$Metric <- 'F1 Scores'
df_A_metric2$Model <- 'RNA + ATAC'
df_A_metric2$Metric <- 'PAP Scores'
df_B_metric1$Model <- 'RNA'
df_B_metric1$Metric <- 'F1 Scores'
df_B_metric2$Model <- 'RNA'
df_B_metric2$Metric <- 'PAP Scores'
df_all <- bind_rows(df_A_metric1, df_A_metric2, df_B_metric1, df_B_metric2) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
df_combined <- bind_rows(df_combined, df_all)
View(df_combined)
within(df_all, rm('..1'))
within(df_all, rm(..1))
within(df_all, rm(..1))
df_all <- subset(df, select = -..1)
df_all <- subset(df, select = -'..1')
df_all <- subset(df, select = -c('..1'))
library(dplyr)
df_all <- df_all %>% select(-...1)
View(df_all)
EMBEDDINGS = c('PCA', 'scVI')
GROUND_TRUTHS = 'wnnL2'
CLASSIFIERS = c('RandomForestClassifier', 'SVC', 'LogisticRegression')
DATA = 'pbmc'
CELL_TYPE = 'All'
N_COMPONENTS = 35
df_combined <- data.frame()
for (GROUND_TRUTH in GROUND_TRUTHS) {
for (EMBEDDING in EMBEDDINGS) {
for (CL in CLASSIFIERS) {
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df.csv"))
df_A_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df.csv"))
df_B_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df_rna.csv"))
df_B_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df_rna.csv"))
# Add identifying columns
df_A_metric1$Model <- 'RNA + ATAC'
df_A_metric1$Metric <- 'F1 Scores'
df_A_metric2$Model <- 'RNA + ATAC'
df_A_metric2$Metric <- 'PAP Scores'
df_B_metric1$Model <- 'RNA'
df_B_metric1$Metric <- 'F1 Scores'
df_B_metric2$Model <- 'RNA'
df_B_metric2$Metric <- 'PAP Scores'
df_all <- bind_rows(df_A_metric1, df_A_metric2, df_B_metric1, df_B_metric2) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
df_all <- df_all %>% select(-...1)
df_combined <- bind_rows(df_combined, df_all)
}
}
}
# Extract the column names for the cell types
selected_column_names <- colnames(df_combined)[3:(ncol(df_combined) - 2)]
numeric_columns <- select(df_combined, where(is.numeric)) %>% names()
print(numeric_columns)
df_long <- df_combined %>%
pivot_longer(cols = all_of(numeric_columns),
names_to = "Cell Type",
values_to = "Value")
# Plot the data
for (metric in unique(df_long$Metric)) {
# Filter data for the current metric
df_metric <- df_long %>% filter(Metric == metric)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, fill = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
library(stringr)
EMBEDDINGS = c('PCA', 'scVI')
GROUND_TRUTHS = 'wnnL2'
CLASSIFIERS = c('RandomForestClassifier', 'SVC', 'LogisticRegression')
DATA = 'pbmc'
CELL_TYPE = 'All'
N_COMPONENTS = 35
df_combined <- data.frame()
for (GROUND_TRUTH in GROUND_TRUTHS) {
for (EMBEDDING in EMBEDDINGS) {
for (CL in CLASSIFIERS) {
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df.csv"))
df_A_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df.csv"))
df_B_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df_rna.csv"))
df_B_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df_rna.csv"))
# Add identifying columns
df_A_metric1$Model <- 'RNA + ATAC'
df_A_metric1$Metric <- 'F1 Scores'
df_A_metric2$Model <- 'RNA + ATAC'
df_A_metric2$Metric <- 'PAP Scores'
df_B_metric1$Model <- 'RNA'
df_B_metric1$Metric <- 'F1 Scores'
df_B_metric2$Model <- 'RNA'
df_B_metric2$Metric <- 'PAP Scores'
df_all <- bind_rows(df_A_metric1, df_A_metric2, df_B_metric1, df_B_metric2) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
df_all <- df_all %>% select(-...1)
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "_", " "))
df_combined <- bind_rows(df_combined, df_all)
}
}
}
# Extract the column names for the cell types
selected_column_names <- colnames(df_combined)[3:(ncol(df_combined) - 2)]
numeric_columns <- select(df_combined, where(is.numeric)) %>% names()
print(numeric_columns)
df_long <- df_combined %>%
pivot_longer(cols = all_of(numeric_columns),
names_to = "Cell Type",
values_to = "Value")
# Plot the data
for (metric in unique(df_long$Metric)) {
# Filter data for the current metric
df_metric <- df_long %>% filter(Metric == metric)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, fill = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
EMBEDDINGS = c('PCA', 'scVI')
GROUND_TRUTHS = 'wnnL2'
CLASSIFIERS = c('RandomForestClassifier', 'SVC', 'LogisticRegression')
DATA = 'pbmc'
CELL_TYPE = 'All'
N_COMPONENTS = 35
df_combined <- data.frame()
for (GROUND_TRUTH in GROUND_TRUTHS) {
for (EMBEDDING in EMBEDDINGS) {
for (CL in CLASSIFIERS) {
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df.csv"))
df_A_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df.csv"))
df_B_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df_rna.csv"))
df_B_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df_rna.csv"))
# Add identifying columns
df_A_metric1$Model <- 'RNA + ATAC'
df_A_metric1$Metric <- 'F1 Scores'
df_A_metric2$Model <- 'RNA + ATAC'
df_A_metric2$Metric <- 'PAP Scores'
df_B_metric1$Model <- 'RNA'
df_B_metric1$Metric <- 'F1 Scores'
df_B_metric2$Model <- 'RNA'
df_B_metric2$Metric <- 'PAP Scores'
df_all <- bind_rows(df_A_metric1, df_A_metric2, df_B_metric1, df_B_metric2) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
df_all <- df_all %>% select(-...1)
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "_", " "))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "RandomForestClassifier", "RF"))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "LogisticRegression", "LR"))
df_combined <- bind_rows(df_combined, df_all)
}
}
}
# Extract the column names for the cell types
selected_column_names <- colnames(df_combined)[3:(ncol(df_combined) - 2)]
numeric_columns <- select(df_combined, where(is.numeric)) %>% names()
print(numeric_columns)
df_long <- df_combined %>%
pivot_longer(cols = all_of(numeric_columns),
names_to = "Cell Type",
values_to = "Value")
# Plot the data
for (metric in unique(df_long$Metric)) {
# Filter data for the current metric
df_metric <- df_long %>% filter(Metric == metric)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, fill = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
EMBEDDINGS = c('PCA', 'scVI')
GROUND_TRUTHS = 'wnnL2'
CLASSIFIERS = c('RandomForestClassifier', 'SVC', 'LogisticRegression')
DATA = 'pbmc'
CELL_TYPE = 'All'
N_COMPONENTS = 35
df_combined <- data.frame()
for (GROUND_TRUTH in GROUND_TRUTHS) {
for (EMBEDDING in EMBEDDINGS) {
for (CL in CLASSIFIERS) {
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df.csv"))
df_A_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df.csv"))
df_B_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df_rna.csv"))
df_B_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df_rna.csv"))
# Add identifying columns
df_A_metric1$Model <- 'RNA + ATAC'
df_A_metric1$Metric <- 'F1 Scores'
df_A_metric2$Model <- 'RNA + ATAC'
df_A_metric2$Metric <- 'PAP Scores'
df_B_metric1$Model <- 'RNA'
df_B_metric1$Metric <- 'F1 Scores'
df_B_metric2$Model <- 'RNA'
df_B_metric2$Metric <- 'PAP Scores'
df_all <- bind_rows(df_A_metric1, df_A_metric2, df_B_metric1, df_B_metric2) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
df_all <- df_all %>% select(-...1)
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "_", " "))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "RandomForestClassifier", "RF"))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "LogisticRegression", "LR"))
df_combined <- bind_rows(df_combined, df_all)
}
}
}
# Extract the column names for the cell types
selected_column_names <- colnames(df_combined)[3:(ncol(df_combined) - 2)]
numeric_columns <- select(df_combined, where(is.numeric)) %>% names()
print(numeric_columns)
df_long <- df_combined %>%
pivot_longer(cols = all_of(numeric_columns),
names_to = "Cell Type",
values_to = "Value")
# Plot the data
for (metric in unique(df_long$Metric)) {
# Filter data for the current metric
df_metric <- df_long %>% filter(Metric == metric)
# Plot
p <- ggplot(df_long, aes(x = Combination, y = Value, fill = Model)) +
geom_violin(position = position_dodge2(preserve = "single"), scale = "width") +
facet_wrap(~ `Cell Type`, ncol = 3) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Data Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
# Plot
p <- ggplot(df_long, aes(x = Combination, y = Value, fill = Model)) +
geom_violin() +
facet_wrap(~ `Cell Type`, ncol = 3) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Data Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
EMBEDDINGS = c('PCA', 'scVI')
GROUND_TRUTHS = 'wnnL2'
CLASSIFIERS = c('RandomForestClassifier', 'SVC', 'LogisticRegression')
DATA = 'pbmc'
CELL_TYPE = 'All'
N_COMPONENTS = 35
df_combined <- data.frame()
for (GROUND_TRUTH in GROUND_TRUTHS) {
for (EMBEDDING in EMBEDDINGS) {
for (CL in CLASSIFIERS) {
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df.csv"))
df_A_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df.csv"))
df_B_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df_rna.csv"))
df_B_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df_rna.csv"))
# Add identifying columns
df_A_metric1$Model <- 'RNA + ATAC'
df_A_metric1$Metric <- 'F1 Scores'
df_A_metric2$Model <- 'RNA + ATAC'
df_A_metric2$Metric <- 'PAP Scores'
df_B_metric1$Model <- 'RNA'
df_B_metric1$Metric <- 'F1 Scores'
df_B_metric2$Model <- 'RNA'
df_B_metric2$Metric <- 'PAP Scores'
df_all <- bind_rows(df_A_metric1, df_A_metric2, df_B_metric1, df_B_metric2) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
df_all <- df_all %>% select(-...1)
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "_", " "))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "RandomForestClassifier", "RF"))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "LogisticRegression", "LR"))
df_combined <- bind_rows(df_combined, df_all)
}
}
}
# Extract the column names for the cell types
selected_column_names <- colnames(df_combined)[3:(ncol(df_combined) - 2)]
numeric_columns <- select(df_combined, where(is.numeric)) %>% names()
print(numeric_columns)
df_long <- df_combined %>%
pivot_longer(cols = all_of(numeric_columns),
names_to = "Cell Type",
values_to = "Value")
# Plot the data
for (metric in unique(df_long$Metric)) {
# Filter data for the current metric
df_metric <- df_long %>% filter(Metric == metric)
# Plot
p <- ggplot(df_long, aes(x = Combination, y = Value, fill = Model)) +
geom_violin() +
facet_wrap(~ `Cell Type`, ncol = 3) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Data Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, fill = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
# Plot
p <- ggplot(df_long, aes(x = Combination, y = Value, fill = Model)) +
geom_violin(scale = "width", width = 0.5)+
facet_wrap(~ `Cell Type`, ncol = 3) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Data Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
# Plot
p <- ggplot(df_long, aes(x = Combination, y = Value, fill = Model)) +
geom_violin(position = position_dodge(width = 0.9), scale = "width")+
facet_wrap(~ `Cell Type`, ncol = 3) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Data Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, fill = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, fill = Model)) +
geom_dotplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, fill = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ geom_dotplot(binaxis='y', stackdir='center',position=position_dodge(1))
print(p)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, fill = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ geom_dotplot(binaxis='y', stackdir='center',position="jitter")
print(p)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, fill = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
library(RColorBrewer)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_color_brewer(palette="Dark2")
print(p)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_color_brewer(palette="PuOr")
print(p)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_color_brewer(palette="Accent")
print(p)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_color_brewer(palette="Set1")
print(p)
# Plot the data
for (metric in unique(df_long$Metric)) {
# Filter data for the current metric
df_metric <- df_long %>% filter(Metric == metric)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = "Value", fill = "Model", title = metric) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_color_brewer(palette="Set1")
print(p)
}
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = metric, fill = "Model") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_color_brewer(palette="Set1")
print(p)
# Plot the data
for (metric in unique(df_long$Metric)) {
# Filter data for the current metric
df_metric <- df_long %>% filter(Metric == metric)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = metric, fill = "Model") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_color_brewer(palette="Set1")
print(p)
}
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = metric, fill = "Model") +
theme_gery() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_color_brewer(palette="Set1")
print(p)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = metric, fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_color_brewer(palette="Set1")
print(p)
# Plot the data
for (metric in unique(df_long$Metric)) {
# Filter data for the current metric
df_metric <- df_long %>% filter(Metric == metric)
# Plot
p <- ggplot(df_metric, aes(x = Combination, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ `Cell Type`) +
labs(x = "Embedding + Classifier", y = metric, fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_color_brewer(palette="Set1")
print(p)
}
View(df_A_metric1)
