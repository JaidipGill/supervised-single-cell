install.packages("reprex")
library(reprex)
library(reprex)
reprex({
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData")
})
library(reprex)
reprex({
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData")
})
library(reprex)
reprex({
sessionInfo()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData")
})
BiocManager::install("GenomeInfoDbData
")"
""
BiocManager::install("GenomeInfoDbData")
BiocManager::install("GenomeInfoDbData")
install.packages("RcppArmadillo")
library(RcppArmadillo)
library(Rcpp)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#> Warning: package 'BiocManager' was built under R version 4.2.3
#> Bioconductor version '3.16' is out-of-date; the current release version '3.17'
#>   is available with R version '4.3'; see https://bioconductor.org/install
BiocManager::install("GenomeInfoDbData")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#> Warning: package 'BiocManager' was built under R version 4.2.3
#> Bioconductor version '3.16' is out-of-date; the current release version '3.17'
#>   is available with R version '4.3'; see https://bioconductor.org/install
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
library(reprex)
reprex({
sessionInfo()
install.packages("RcppArmadillo")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
})
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#> Warning: package 'BiocManager' was built under R version 4.2.3
#> Bioconductor version '3.16' is out-of-date; the current release version '3.17'
#>   is available with R version '4.3'; see https://bioconductor.org/install
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
install.packages("Rcpp", verbose=TRUE)
library(Rcpp)
install.packages("geometries", verbose=TRUE)
install.packages("labelled", verbose=TRUE)
install.packages("Seurat", verbose=TRUE)
install.packages("sp", verbose=TRUE)
install.packages("sfheaders", verbose=TRUE)
install.packages("GenomeInfoDbData", verbose=TRUE)
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
install.packages("terra", verbose=TRUE)
install.packages("terra", verbose=TRUE)
library(reprex)
reprex({
sessionInfo()
install.packages("Rcpp")
install.packages("terra")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
})
BiocManager::install(version = "3.17")
BiocManager::install()
a
BiocManager::install(version = "3.16")
reprex({
sessionInfo()
install.packages("Rcpp")
install.packages("terra")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
})
reprex({
sessionInfo()
install.packages("Rcpp", verbose = TRUE)
install.packages("terra", verbose = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager", verbose = TRUE)
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
})
library(reprex)
reprex({
sessionInfo()
install.packages("Rcpp", verbose = TRUE)
install.packages("terra", verbose = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager", verbose = TRUE)
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
})
install.packages("Rcpp", verbose = TRUE)
library(reprex)
reprex({
sessionInfo()
install.packages("Rcpp", verbose = TRUE)
install.packages("terra", verbose = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager", verbose = TRUE)
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
})
install.packages(file.choose(Downloads/terra_1.7-39.zip), repos=NULL)
install.packages(file.choose("Downloads/terra_1.7-39.zip"), repos=NULL)
library(reprex)
reprex({
sessionInfo()
install.packages("Rcpp", verbose = TRUE)
install.packages("terra", verbose = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager", verbose = TRUE)
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
})
sessionInfo()
install.packages("Rcpp", verbose = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager", verbose = TRUE)
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
sessionInfo()
install.packages("Rcpp", verbose = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager", verbose = TRUE)
BiocManager::install("GenomeInfoDbData", verbose = TRUE)
install.packages('reticulate')
library(reticulate)
pd <- import("pandas")
EMBEDDINGS = 'scVI'
CLASSIFIERS = 'SVC'
GROUND_TRUTHS = 'wnnL2'
DATA = 'pbmc'
CELL_TYPE = 'All'
N_COMPONENTS = 35
df_combined <- data.frame()
for (GROUND_TRUTH in GROUND_TRUTHS) {
for (EMBEDDING in EMBEDDINGS) {
for (CL in CLASSIFIERS) {
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df.csv"))
df_A_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Precision_class_df.csv"))
df_A_metric3 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Recall_class_df.csv"))
df_B_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df_rna.csv"))
df_B_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Precision_class_df_rna.csv"))
df_B_metric3 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Recall_class_df_rna.csv"))
# Add identifying columns
df_A_metric1$Model <- 'RNA + ATAC'
df_A_metric1$Metric <- 'F1 Scores'
df_A_metric2$Model <- 'RNA + ATAC'
df_A_metric2$Metric <- 'Precision'
df_A_metric3$Model <- 'RNA + ATAC'
df_A_metric3$Metric <- 'Recall'
df_B_metric1$Model <- 'RNA'
df_B_metric1$Metric <- 'F1 Scores'
df_B_metric2$Model <- 'RNA'
df_B_metric2$Metric <- 'Precision'
df_B_metric3$Model <- 'RNA'
df_B_metric3$Metric <- 'Recall'
# Read the PAP CSV files
df_A_PAP <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df.csv"))
df_B_PAP <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df_rna.csv"))
# Add identifying columns for PAP
df_A_PAP$Model <- 'RNA + ATAC'
df_A_PAP$Metric <- 'PAP'
df_B_PAP$Model <- 'RNA'
df_B_PAP$Metric <- 'PAP'
# Combine datasets including PAP
df_all <- bind_rows(df_A_metric1, df_A_metric2, df_A_metric3, df_B_metric1, df_B_metric2, df_B_metric3, df_A_PAP, df_B_PAP) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
df_all <- df_all %>% select(-...1)
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "_", " "))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "RandomForestClassifier", "RF"))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "LogisticRegression", "LR"))
df_combined <- bind_rows(df_combined, df_all)
}
}
}
library(tidyverse)
library(ggplot2)
library(glue)
library(ggpubr)
library(dplyr)
library(stringr)
library(RColorBrewer)
library(ggh4x)
library(purrr)
library(dunn.test)
EMBEDDINGS = 'scVI'
CLASSIFIERS = 'SVC'
GROUND_TRUTHS = 'wnnL2'
DATA = 'pbmc'
CELL_TYPE = 'All'
N_COMPONENTS = 35
df_combined <- data.frame()
for (GROUND_TRUTH in GROUND_TRUTHS) {
for (EMBEDDING in EMBEDDINGS) {
for (CL in CLASSIFIERS) {
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df.csv"))
df_A_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Precision_class_df.csv"))
df_A_metric3 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Recall_class_df.csv"))
df_B_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df_rna.csv"))
df_B_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Precision_class_df_rna.csv"))
df_B_metric3 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Recall_class_df_rna.csv"))
# Add identifying columns
df_A_metric1$Model <- 'RNA + ATAC'
df_A_metric1$Metric <- 'F1 Scores'
df_A_metric2$Model <- 'RNA + ATAC'
df_A_metric2$Metric <- 'Precision'
df_A_metric3$Model <- 'RNA + ATAC'
df_A_metric3$Metric <- 'Recall'
df_B_metric1$Model <- 'RNA'
df_B_metric1$Metric <- 'F1 Scores'
df_B_metric2$Model <- 'RNA'
df_B_metric2$Metric <- 'Precision'
df_B_metric3$Model <- 'RNA'
df_B_metric3$Metric <- 'Recall'
# Read the PAP CSV files
df_A_PAP <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df.csv"))
df_B_PAP <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df_rna.csv"))
# Add identifying columns for PAP
df_A_PAP$Model <- 'RNA + ATAC'
df_A_PAP$Metric <- 'PAP'
df_B_PAP$Model <- 'RNA'
df_B_PAP$Metric <- 'PAP'
# Combine datasets including PAP
df_all <- bind_rows(df_A_metric1, df_A_metric2, df_A_metric3, df_B_metric1, df_B_metric2, df_B_metric3, df_A_PAP, df_B_PAP) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
df_all <- df_all %>% select(-...1)
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "_", " "))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "RandomForestClassifier", "RF"))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "LogisticRegression", "LR"))
df_combined <- bind_rows(df_combined, df_all)
}
}
}
setwd("~/GitHub/supervised-single-cell")
EMBEDDINGS = 'scVI'
CLASSIFIERS = 'SVC'
GROUND_TRUTHS = 'wnnL2'
DATA = 'pbmc'
CELL_TYPE = 'All'
N_COMPONENTS = 35
df_combined <- data.frame()
for (GROUND_TRUTH in GROUND_TRUTHS) {
for (EMBEDDING in EMBEDDINGS) {
for (CL in CLASSIFIERS) {
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df.csv"))
df_A_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Precision_class_df.csv"))
df_A_metric3 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Recall_class_df.csv"))
df_B_metric1 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_F1_df_rna.csv"))
df_B_metric2 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Precision_class_df_rna.csv"))
df_B_metric3 <- read_csv(glue("Supervised Models/Results_{SUFFIX}_Recall_class_df_rna.csv"))
# Add identifying columns
df_A_metric1$Model <- 'RNA + ATAC'
df_A_metric1$Metric <- 'F1 Scores'
df_A_metric2$Model <- 'RNA + ATAC'
df_A_metric2$Metric <- 'Precision'
df_A_metric3$Model <- 'RNA + ATAC'
df_A_metric3$Metric <- 'Recall'
df_B_metric1$Model <- 'RNA'
df_B_metric1$Metric <- 'F1 Scores'
df_B_metric2$Model <- 'RNA'
df_B_metric2$Metric <- 'Precision'
df_B_metric3$Model <- 'RNA'
df_B_metric3$Metric <- 'Recall'
# Read the PAP CSV files
df_A_PAP <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df.csv"))
df_B_PAP <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df_rna.csv"))
# Add identifying columns for PAP
df_A_PAP$Model <- 'RNA + ATAC'
df_A_PAP$Metric <- 'PAP'
df_B_PAP$Model <- 'RNA'
df_B_PAP$Metric <- 'PAP'
# Combine datasets including PAP
df_all <- bind_rows(df_A_metric1, df_A_metric2, df_A_metric3, df_B_metric1, df_B_metric2, df_B_metric3, df_A_PAP, df_B_PAP) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
df_all <- df_all %>% select(-...1)
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "_", " "))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "RandomForestClassifier", "RF"))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "LogisticRegression", "LR"))
df_combined <- bind_rows(df_combined, df_all)
}
}
}
# Pivot the data
df_long <- df_combined %>%
pivot_longer(cols = c(-Model, -Metric, -Combination),
names_to = "Cell Type",
values_to = "Value")
# Generate summary dataframe
summary_df <- df_long %>%
group_by(Model, Metric, `Cell Type`) %>%
summarise(
Median = median(Value, na.rm = TRUE),
Lower_Quartile = quantile(Value, 0.25, na.rm = TRUE),
Upper_Quartile = quantile(Value, 0.75, na.rm = TRUE)
) %>%
ungroup()
# Print the summary dataframe
print(summary_df)
# Plot the data excluding PAP
df_long_plot <- df_long %>% filter(Metric != "PAP")
p <- ggplot(df_long_plot, aes(x = `Cell Type`, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ Metric) +
labs(x = NULL, y = "Value", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_brewer(palette="Set1")
print(p)
p <- ggplot(df_long_plot, aes(x = `Cell Type`, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ Metric) +
labs(x = NULL, y = "Value", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=16)) +
scale_color_brewer(palette="Set1")
print(p)
p <- ggplot(df_long_plot, aes(x = `Cell Type`, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ Metric) +
labs(x = NULL, y = "Value", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14)) +
scale_color_brewer(palette="Set1")
print(p)
p <- ggplot(df_long_plot, aes(x = `Cell Type`, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ Metric) +
labs(x = NULL, y = "Value", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=13)) +
scale_color_brewer(palette="Set1")
print(p)
p <- ggplot(df_long_plot, aes(x = `Cell Type`, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ Metric) +
labs(x = NULL, y = "Value", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=12)) +
scale_color_brewer(palette="Set1")
print(p)
p <- ggplot(df_long_plot, aes(x = `Cell Type`, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ Metric) +
labs(x = NULL, y = "Value", fill = "Model") +
theme(axis.text.x = element_text(angle = 35, hjust = 1, size=13)) +
scale_color_brewer(palette="Set1")
print(p)
p <- ggplot(df_long_plot, aes(x = `Cell Type`, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
facet_wrap(~ Metric) +
labs(x = NULL, y = "Value", fill = "Model") +
theme(axis.text.x = element_text(angle = 55, hjust = 1, size=13)) +
scale_color_brewer(palette="Set1")
print(p)
df_combined <- data.frame()
for (GROUND_TRUTH in GROUND_TRUTHS) {
for (EMBEDDING in EMBEDDINGS) {
for (CL in CLASSIFIERS) {
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df.csv"))
df_B <- read_csv(glue("Supervised Models/Results_{SUFFIX}_PAP_df_rna.csv"))
# Add identifying columns
df_A$Model <- 'RNA + ATAC'
df_A$Metric <- 'PAP'
df_B$Model <- 'RNA'
df_B$Metric <- 'PAP'
# Combine datasets
df_all <- bind_rows(df_A, df_B) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
df_all <- df_all %>% select(-...1)
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "_", " "))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "RandomForestClassifier", "RF"))
df_all <- df_all %>%
mutate(Combination = str_replace_all(Combination, "LogisticRegression", "LR"))
df_combined <- bind_rows(df_combined, df_all)
}
}
}
# Pivot the data
df_long <- df_combined %>%
pivot_longer(cols = c(-Model, -Metric, -Combination),
names_to = "Cell Type",
values_to = "Value")
# Plot the data
p <- ggplot(df_long, aes(x = `Cell Type`, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
labs(x = "Cell Type", y = "PAP Score", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 13)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none")
print(p)
# Plot the data
p <- ggplot(df_long, aes(x = `Cell Type`, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
labs(x = "Cell Type", y = "PAP Score", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none")
print(p)
# Plot the data
p <- ggplot(df_long, aes(x = `Cell Type`, y = Value, color = Model)) +
geom_boxplot(position = "dodge") +
labs(x = "Cell Type", y = "PAP Score", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 13)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none")
print(p)
EMBEDDINGS = c('PCA', 'scVI')
GROUND_TRUTHS = c('wnnL2')
CLASSIFIERS = c('RandomForestClassifier', 'SVC', 'LogisticRegression')
DATA = 'pbmc'
CELL_TYPE = 'All'
N_COMPONENTS = 35
df_combined <- data.frame()
for (GROUND_TRUTH in GROUND_TRUTHS) {
for (EMBEDDING in EMBEDDINGS) {
for (CL in CLASSIFIERS) {
SUFFIX = glue('{DATA}_{CL}_{EMBEDDING}_{GROUND_TRUTH}_{CELL_TYPE}_{N_COMPONENTS}')
# Read the CSV files
df_A_metric1 <- read_csv(glue("Supervised Models/Macro Metrics/Results_{SUFFIX}_F1_overall_df.csv"))
df_A_metric2 <- read_csv(glue("Supervised Models/Macro Metrics/Results_{SUFFIX}_Precision_overall_df.csv"))
df_A_metric3 <- read_csv(glue("Supervised Models/Macro Metrics/Results_{SUFFIX}_Recall_overall_df.csv"))
df_B_metric1 <- read_csv(glue("Supervised Models/Macro Metrics/Results_{SUFFIX}_F1_overall_df_rna.csv"))
df_B_metric2 <- read_csv(glue("Supervised Models/Macro Metrics/Results_{SUFFIX}_Precision_overall_df_rna.csv"))
df_B_metric3 <- read_csv(glue("Supervised Models/Macro Metrics/Results_{SUFFIX}_Recall_overall_df_rna.csv"))
# Add identifying columns
df_A_metric1$Model <- 'RNA + ATAC'
df_A_metric1$Metric <- 'F1 Scores'
df_A_metric2$Model <- 'RNA + ATAC'
df_A_metric2$Metric <- 'Precision'
df_A_metric3$Model <- 'RNA + ATAC'
df_A_metric3$Metric <- 'Recall'
df_B_metric1$Model <- 'RNA'
df_B_metric1$Metric <- 'F1 Scores'
df_B_metric2$Model <- 'RNA'
df_B_metric2$Metric <- 'Precision'
df_B_metric3$Model <- 'RNA'
df_B_metric3$Metric <- 'Recall'
# Combine datasets
# Combine datasets
df_all <- bind_rows(df_A_metric1, df_A_metric2, df_A_metric3, df_B_metric1, df_B_metric2, df_B_metric3) %>%
mutate(Combination = paste(EMBEDDING, CL, sep = "_"))
# Correct extraction of Embedding and Classifier from Combination
df_all$Embedding <- gsub("_.*", "", df_all$Combination)
df_all$Classifier <- gsub(".*_", "", df_all$Combination)
df_all$Classifier <- str_replace_all(df_all$Classifier, c(
"RandomForestClassifier" = "RF",
"LogisticRegression" = "LR"
))
df_combined <- bind_rows(df_combined, df_all)
}
}
}
# Boxplot with nested facet
#df_combined$Embedding <- gsub("\n.*", "", df_combined$Combination)
#df_combined$Classifier <- gsub(".*\n", "", df_combined$Combination)
# Nested facet plot using facet_nested from ggh4x
p <- ggplot(df_combined, aes(x = Classifier, y = `0`, color = Model)) +
geom_boxplot(position = "dodge") +
facet_nested(.~Embedding + Metric, scales="free") +
labs(x = "Classifier", y = "Score", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 13)) +
scale_color_brewer(palette="Set1")
print(p)
# Boxplot with nested facet
#df_combined$Embedding <- gsub("\n.*", "", df_combined$Combination)
#df_combined$Classifier <- gsub(".*\n", "", df_combined$Combination)
# Nested facet plot using facet_nested from ggh4x
p <- ggplot(df_combined, aes(x = Classifier, y = `0`, color = Model)) +
geom_boxplot(position = "dodge") +
facet_nested(.~Embedding + Metric, scales="free") +
labs(x = "Classifier", y = "Score", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 13)) +
theme(axis.text.y = element_text(size = 13)) +
scale_color_brewer(palette="Set1")
print(p)
# Boxplot with nested facet
#df_combined$Embedding <- gsub("\n.*", "", df_combined$Combination)
#df_combined$Classifier <- gsub(".*\n", "", df_combined$Combination)
# Nested facet plot using facet_nested from ggh4x
p <- ggplot(df_combined, aes(x = Classifier, y = `0`, color = Model)) +
geom_boxplot(position = "dodge") +
facet_nested(.~Embedding + Metric, scales="free") +
labs(x = "Classifier", y = "Score", fill = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14)) +
theme(axis.text.y = element_text(size = 13)) +
scale_color_brewer(palette="Set1")
print(p)
